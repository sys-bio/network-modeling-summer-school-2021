{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"toc-autonumbering":true,"colab":{"name":"Parameter Fitting Part 1b - Analyzing fits","provenance":[],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"b_6pWI1l_ptk"},"source":["# PARAMETER FITTING PART 1B: ANALYZING FITS\n"]},{"cell_type":"markdown","metadata":{"id":"441hxZnP1gkT"},"source":["This notebook provides explores the key elements of fitting parameters."]},{"cell_type":"markdown","metadata":{"id":"DDsRwu1v_ptn"},"source":["# Preliminaries"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sDo7TOtiRPQX","executionInfo":{"status":"ok","timestamp":1626104539784,"user_tz":420,"elapsed":34178,"user":{"displayName":"Joseph Hellerstein","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggr-yAwbfqFCOlFTHoKepUYJ9VjZuCGILW-YdHvUQ=s64","userId":"07301174361489660166"}},"outputId":"1089a68f-e1a8-44e0-ffe8-5b9ac0d6f85a"},"source":["!pip install -q tellurium"],"execution_count":1,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 122kB 6.5MB/s \n","\u001b[K     |████████████████████████████████| 6.2MB 26.4MB/s \n","\u001b[K     |████████████████████████████████| 5.6MB 11.8MB/s \n","\u001b[K     |████████████████████████████████| 36.7MB 79kB/s \n","\u001b[K     |████████████████████████████████| 2.0MB 15.5MB/s \n","\u001b[K     |████████████████████████████████| 5.8MB 29.8MB/s \n","\u001b[K     |████████████████████████████████| 3.2MB 30.8MB/s \n","\u001b[K     |████████████████████████████████| 3.1MB 30.2MB/s \n","\u001b[K     |████████████████████████████████| 28.5MB 121kB/s \n","\u001b[K     |████████████████████████████████| 14.9MB 208kB/s \n","\u001b[K     |████████████████████████████████| 2.5MB 35.6MB/s \n","\u001b[K     |████████████████████████████████| 16.6MB 113kB/s \n","\u001b[31mERROR: datascience 0.10.6 has requirement folium==0.2.1, but you'll have folium 0.8.3 which is incompatible.\u001b[0m\n","\u001b[31mERROR: albumentations 0.1.12 has requirement imgaug<0.2.7,>=0.2.5, but you'll have imgaug 0.2.9 which is incompatible.\u001b[0m\n","\u001b[?25h"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HTjwgSnI_ptn","colab":{"base_uri":"https://localhost:8080/","height":364},"executionInfo":{"status":"error","timestamp":1626104542033,"user_tz":420,"elapsed":2258,"user":{"displayName":"Joseph Hellerstein","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggr-yAwbfqFCOlFTHoKepUYJ9VjZuCGILW-YdHvUQ=s64","userId":"07301174361489660166"}},"outputId":"c1cd4f98-ce8b-4438-9827-3b3d90d751d6"},"source":["# Python packages used in this chapter\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import pandas as pd\n","import urllib.request # use this library to download file from GitHub\n","import tellurium as te\n","from SBstoat.namedTimeseries import NamedTimeseries, TIME\n","from SBstoat.modelFitter import ModelFitter\n","import SBstoat"],"execution_count":2,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-cd9aedc6946e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0murllib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m \u001b[0;31m# use this library to download file from GitHub\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtellurium\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mte\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mSBstoat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnamedTimeseries\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mNamedTimeseries\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTIME\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mSBstoat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodelFitter\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mModelFitter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSBstoat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'SBstoat'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"id":"0GeZyBQv9raq","executionInfo":{"status":"aborted","timestamp":1626104542029,"user_tz":420,"elapsed":6,"user":{"displayName":"Joseph Hellerstein","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggr-yAwbfqFCOlFTHoKepUYJ9VjZuCGILW-YdHvUQ=s64","userId":"07301174361489660166"}}},"source":["def getSharedCodes(moduleName):\n","  \"\"\"\n","  Obtains common codes from the github repository.\n","\n","  Parameters\n","  ----------\n","  moduleName: str\n","      name of the python module in the src directory\n","  \"\"\"\n","  url = \"https://github.com/vporubsky/network-modeling-summer-school/raw/main/src/%s.py\" % moduleName\n","  local_python = \"python.py\"\n","  _, _ = urllib.request.urlretrieve(url=url, filename=local_python)\n","  with open(local_python, \"r\") as fd:\n","    codeStr = \"\".join(fd.readlines())\n","  print(codeStr)\n","  exec(codeStr, globals())\n","\n","# Acquire codes\n","getSharedCodes(\"util\")\n","\n","# TESTS\n","assert(isinstance(LINEAR_PATHWAY_DF, pd.DataFrame))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vk0s882srvpL"},"source":["# Constants and Helper Functions"]},{"cell_type":"code","metadata":{"id":"NDzoAlwO_pto","executionInfo":{"status":"aborted","timestamp":1626104542030,"user_tz":420,"elapsed":7,"user":{"displayName":"Joseph Hellerstein","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggr-yAwbfqFCOlFTHoKepUYJ9VjZuCGILW-YdHvUQ=s64","userId":"07301174361489660166"}}},"source":["def getSharedCodes(moduleName):\n","  \"\"\"\n","  Obtains common codes from the github repository.\n","\n","  Parameters\n","  ----------\n","  moduleName: str\n","      name of the python module in the src directory\n","  \"\"\"\n","  url = \"https://github.com/vporubsky/network-modeling-summer-school/raw/main/src/%s.py\" % moduleName\n","  local_python = \"python.py\"\n","  _, _ = urllib.request.urlretrieve(url=url, filename=local_python)\n","  with open(local_python, \"r\") as fd:\n","    codeStr = \"\".join(fd.readlines())\n","  print(codeStr)\n","  exec(codeStr, globals())\n","\n","# Acquire codes\n","getSharedCodes(\"util\")\n","\n","# TESTS\n","assert(isinstance(LINEAR_PATHWAY_DF, pd.DataFrame))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zv0F6VLHs7jX","executionInfo":{"status":"aborted","timestamp":1626104542030,"user_tz":420,"elapsed":7,"user":{"displayName":"Joseph Hellerstein","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggr-yAwbfqFCOlFTHoKepUYJ9VjZuCGILW-YdHvUQ=s64","userId":"07301174361489660166"}}},"source":["def plotTS(ts, title=\"\"):\n","    \"\"\"\n","    Plots columns in a timeseries.\n","    \n","    Parameters\n","    ----------\n","    ts: NamedTimeseries\n","    \"\"\"\n","    p = plt.plot(ts[TIME], ts[ts.colnames])\n","    _ = plt.legend(p, ts.colnames, bbox_to_anchor=(1.05, 1), loc='upper left')\n","    _ = plt.title(title)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"REHYGlmp_pto"},"source":["# Linear Pathway Model & Data"]},{"cell_type":"markdown","metadata":{"id":"UAl1msSM_pto"},"source":["To make these ideas concrete, we use the linear pathway model."]},{"cell_type":"code","metadata":{"id":"h9IntR4z_ptp","executionInfo":{"status":"aborted","timestamp":1626104542031,"user_tz":420,"elapsed":7,"user":{"displayName":"Joseph Hellerstein","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggr-yAwbfqFCOlFTHoKepUYJ9VjZuCGILW-YdHvUQ=s64","userId":"07301174361489660166"}}},"source":["print(LINEAR_PATHWAY_MODEL)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"492kzUZf_ptp"},"source":["Note that the values of the parameters are 0! This is not because their true value is 0.\n","Rather, it's because we don't know the value of these parameters."]},{"cell_type":"markdown","metadata":{"id":"sCOE3S6i_ptp"},"source":["It is very common to have parameters with unknown values in kinetics models. Typically, we know the range\n","of the parameter values, but not a suitable value itself.\n","\n","So, how do we run a model with known values for *all* of its parameters? The answer is that we estimate or **fit paramter values** based on observed data.\n","\n","For this example, the observational data are in the file specified in ``LINEAR_PATHWAY_DATA``."]},{"cell_type":"code","metadata":{"id":"KPd29h35_ptp","executionInfo":{"status":"aborted","timestamp":1626104542032,"user_tz":420,"elapsed":8,"user":{"displayName":"Joseph Hellerstein","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggr-yAwbfqFCOlFTHoKepUYJ9VjZuCGILW-YdHvUQ=s64","userId":"07301174361489660166"}}},"source":["data = NamedTimeseries(dataframe=LINEAR_PATHWAY_DF)\n","fig, ax = plt.subplots(1)\n","for col in data.colnames:\n","    ax.scatter(data[TIME], data[col])\n","_ = plt.legend(data.colnames)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lnZ9f7RC_ptr"},"source":["The following sections provide details of parameter fitting using the ``PATHWAY_MODEL``."]},{"cell_type":"markdown","metadata":{"id":"-hmqPyB2_ptr"},"source":["# Fitting Basics <a class=\"anchor\" id=\"parameter-fitting-fitting-basics\"></a>"]},{"cell_type":"markdown","metadata":{"id":"zmsDwHwP_ptr"},"source":["Some key concepts are:\n","- A **parameter** is a constant whose value is unknown.\n","- **Observed data** are data that are used for fitting parameter values.\n","- **Fitted data** are data produced by a simulation for an assignment of values to parameters.\n","- **Residuals** are the difference between observed data and simulated data."]},{"cell_type":"markdown","metadata":{"id":"xh-HmYBm_pts"},"source":["The basic algorithm for fitting is described below.\n","The algorithm estimates ``parameters``, the vector of values of unknown parameters.\n","The inputs to the algoritm are:\n","- ``model`` - the simulation model\n","- ``parameters`` parameters to estimate with their initial values\n","- ``observedData`` observed data used for fitting\n","\n","1. **Initialization**\n","   1. ``fittedData = simulate(model, parameters)``\n","   1. ``residuals = observedData - fittedData``\n","1. **Loop**\n","   1. ``parameters`` = adjust ``parameters`` based on ``residuals``\n","   1. ``fittedData = simulation(parameters)``\n","   1. ``residuals = observedData - fittedData``\n","   1. if ``residuals`` are small\n","       1. ``return parameters``"]},{"cell_type":"markdown","metadata":{"id":"ngfRSZI6_pts"},"source":["The algorithm is fairly straight forward, with one exception.\n","Step A - \"adjust ``parameters`` based on ``residuals``\" How are these adjustments made?\n","\n","The adjustments are made based on an optimization that chooses parameter values that\n","minimize the residuals.\n","We give a brief discussion of optimization in the next section."]},{"cell_type":"markdown","metadata":{"id":"a_t7SuG-15LH"},"source":["# Exercise\n","For the ``LINEAR_PATHWWAY_MODEL`` model and ``LINEAR_PATHWAY_DF`` data:\n","\n","1. Plot the residuals for all chemical species using a model with the true values of parameters. Use the values 1, 2, 3, 4 or ``k1``, ``k2``, ``k3``, ``k4``.\n","Where are the residuals the largest? Why?\n","\n","1. Evaluate possible fits for ``k1``. You can quantify the \"goodness\" of a fit by calculating **RSQ**, the sum of squared residuals, for a set of parameter values. Use the values in ``PARAMETER_DCT`` for the parameters except for ``k1``. Run simulations with ``k1`` in the range $[0, 4]$ for 20 equally separated values. Plot RSQ. Where on the plot does the true value appear?\n","\n","1. Use the approach in (2) to propose an algorithm for parameter estimation. (No code is required; just a description in words.) What is the performance of this algorithm as the number of parameters increases?"]}]}